(letrec (factorial (lambda (x) (if (zero? x)
                                   1
                                   (* x (factorial (- x 1))))))
  (letrec (choose (lambda (n k) (/ (factorial n)
                                   (* (factorial k) (factorial (- n k))))))
    (choose 20 10)))


(define (div1 n m)
  (let ([diff (- n m)])
    (if (zero? diff)
        0
        (+ 1 (div1 diff m)))))

(define (div n m)
  (div1 (+ 1 n) m))

(define (/ n m)
  (letrec (div1 (lambda (n1 m1)
                   (let ([diff (- n1 m1)])
                     (if (zero? diff)
                         0
                         (+ 1 (div1 diff m1))))))
    (div1 (+ 1 n) m)))

(div 5 5)
