;; Base file defining most of the functions of the language

;; Useful Functions

(define (id x) x)
(define (const x _) x)
(define hang
  ((λ (u) (u u)) (λ (u) (u u))))


;; Values

(define (#t t _) t)
(define (#f _ f) f)


;; Bool Ops

(define (if c t f)
  (c t f))
(define (and a b)
  (a b #f))
(define (or a b)
  (a #t b))
(define (not a)
  (a #f #t))


;; Numbers

(define (zero? n) (n (const #f) #t))
(define (= a b) (and (zero? (- a b)) (zero? (- b a))))
(define (even? n) (n not #t))
(define (+ a b) (λ (f x) (a f) (b f x)))
(define (* a b) (λ (f) (a (b f))))
(define (- a b)
  (let ((prev (λ (n) (λ (f x) (n (λ (g h) (h (g f)))
                                 (const x)
                                 id)))))
    (b prev a)))
(define (/ n m)
  (letrec (div1 (lambda (n1 m1)
                   (let ([diff (- n1 m1)])
                     (if (zero? diff)
                         0
                         (+ 1 (div1 diff m1))))))
    (div1 (+ 1 n) m)))

(define (<= a b)
  (zero? (- a b)))
(define (>= a b)
  (zero? (- b a)))
(define (< a b)
  (<= (+ 1 a) b))
(define (> a b)
  (>= a (+ 1 b)))


;; Lists

(define (cons h t)
  (λ (f _) (f h t)))
(define empty
  (λ (_ e) (e id)))
(define (head l)
  (l (λ (h _) h) hang))
(define (tail l)
  (l (λ (_ t) t) hang))
(define (pair? l)
  (l (λ (_ _) #t) (const #f)))
(define (null? l)
  (l (λ (_ _) #f) (const #t)))

(define (foldl fn acc xs)
  (if (null? xs)
      acc
      (foldl fn (fn acc (head xs)) (tail xs))))

(define (foldr fn acc xs)
  (if (null? xs)
      acc
      (fn (head xs) (foldr fn acc (tail xs)))))

(define (map f xs)
  (if (null? xs)
      xs
      (cons (f (head xs)) (map f (tail xs)))))

(define (range low high)
  (if (>= low high)
      ()
      (cons low
            (range (+ 1 low)
                   high))))
